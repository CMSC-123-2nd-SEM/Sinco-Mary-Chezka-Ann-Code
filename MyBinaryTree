class Node { // This represents the node of binary
  String key;
  Node left, right; //declare the children

  
  public Node(String val) { //Assign value to new node and set left and right children to null
	  key = val;
	  left = right = null;
  }
}


public class MyBinaryTree {
  static Node root; // Represent the root of binary tree

  public static boolean isLeaf(Node node) { // Check if there are values/node in the left and right children
      return node.left == null && node.right == null;
  }

  public static double process(String op, double x, double y) //The process of evaluating the arithmetic of the tree 
  {
      if (op.equals("+")) { return x + y; }
      if (op.equals("-")) { return x - y; }
      if (op.equals("*")) { return x * y; }
      if (op.equals("/")) { return x / y; }

      return 0;
  }

  public static double evaluate(Node node) {//This will return the result from the process
      if (node == null) { //return nothing if the tree is empty
          return 0;
      }

      if (isLeaf(node)) {//return nothing if the tree is empty
          return Double.valueOf(node.key);
      }

      double x = evaluate(node.left); 
      double y = evaluate(node.right);

      return process(node.key, x, y);// evaluate the tree from left to right (inorder)
  }

  
  
  public void printTree (Node node) { //prints the tree
      if (node == null)
          return;
      
      System.out.print("root = " + node.key);
      
      System.out.println();

      System.out.print("left subtree = ");
      printPreorder(node.left);
      
      System.out.print("\nright subtree = ");
      printPreorder(node.right);
  }


  public int findHeight(Node node) {  // this will return the depth of the tree
      if(node == null) {  // check if the tree is empty
           System.out.println("Tree is empty");  
          return 0;  
      } 
      
      else {  
          int leftHeight = 0, rightHeight = 0;  

          if(node.left != null)  
              leftHeight = findHeight(node.left);  //counts the nodes in left

          if(node.right != null)  
              rightHeight = findHeight(node.right);  //counts the nodes in right

          int max = (leftHeight > rightHeight) ? leftHeight : rightHeight;  

          return (max + 1);  //compare the number of nodes of left and right children then add 1 to max until it reach the end node
      }  
   }  
  
  public int countNode(Node root) { //counts the number of nodes in the tree

      if(root == null) //check if the tree is empty
          return 0;

      return 1 + countNode(root.left) + countNode(root.right); //add the nodes of the left and right children 
      
  }
  
  public void printPostorder(Node node) {// Print its nodes according to the "bottom-up" postorder traversal
      if (node == null)
          return;

      printPostorder(node.left); //recur on the left subtree

      printPostorder(node.right);//then recur on the right subtree

      System.out.print(node.key + " ");//then print the tree according to postorder traversal
  }

  public void printInorder(Node node) {//print its nodes in inorder
      if (node == null)
          return;

      printInorder(node.left);//first recur on left child

      System.out.print(node.key + " ");//then print the data of node

      printInorder(node.right);//now recur on right child
  }

  public void printPreorder(Node node) {//print its nodes in preorder
      if (node == null)
          return;

     System.out.print(node.key + " ");//first print data of node 

      printPreorder(node.left);//then recur on left subtree 
      
      printPreorder(node.right);//now recur on right subtree
  }
  
   static int isClone(Node root1,Node root2) { // Check if two trees are identical
	  if(root1 == null && root2 == null)
		  return 1;// identical if both trees are empty
	  
	  else if(root1 != null && root2 == null)
	  return 0 ; 
	  
	  else if(root1 == null && root2 != null)
		  return 0 ;
	  else {
		  if (root1.key == root2.key &&
				  isClone(root1.left, root2.left) == 1 &&
				  isClone(root1.right, root2.right) == 1) {
			 return 1;
		     }
		  else
		     return 0;
	 }
	  
   }
   
   
   
  
   public static void main(String[] args) {
	  MyBinaryTree tree1 = new MyBinaryTree();  
	  Node root1 = new Node("+");
      root1.left = new Node("*");
      root1.left.left = new Node("15");
      root1.left.right = new Node("3");
      root1.right = new Node("-");
      root1.right.left = new Node("25");
      root1.right.right = new Node("/");
      root1.right.right.left = new Node("50");
      root1.right.right.right = new Node("1");
      
      System.out.println("FIRST TREE \n=======================");
      System.out.println("\nBinary Tree: ");
      tree1.printTree(root1);
      
      System.out.println("\n\nHeight: " + tree1.findHeight(root1));
      
      System.out.println("Number of nodes: " + tree1.countNode(root1));
   
      System.out.println("\nInorder traversal: ");
      tree1.printInorder(root1);
   
      System.out.println("\nPostorder traversal: ");
      tree1.printPostorder(root1);
      
      System.out.println("\nPreorder traversal: ");
      tree1.printPreorder(root1);
      
      System.out.println("\n\nBinary tree evaluation (inorder): " + evaluate(root1));
      
      System.out.println("========================\n");
      
      
      MyBinaryTree tree2 = new MyBinaryTree();  
      Node root2 = new Node("+");
      root2.left = new Node("*");
      root2.left.left = new Node("15");
      root2.left.right = new Node("3");
      root2.right = new Node("-");
      root2.right.left = new Node("25");
      root2.right.right = new Node("/");
      root2.right.right.left = new Node("50");
      root2.right.right.right = new Node("1");
      
      System.out.println("SECOND TREE \n=======================");
      System.out.println("\nBinary Tree: ");
      tree2.printTree(root2);
      
      System.out.println("\n\nHeight: " + tree2.findHeight(root2));
     
      System.out.println("Number of nodes: " + tree2.countNode(root2));
      
      System.out.println("\nInorder traversal: ");
      tree2.printInorder(root2);
      
      System.out.println("\nPostorder traversal: ");
      tree2.printPostorder(root2);
      
      System.out.println("\nPreorder traversal: ");
      tree2.printPreorder(root2);
      
      System.out.println("\n\nBinary tree evaluation (inorder): " + evaluate(root2));
      
      System.out.println("========================\n");
      
      if (isClone(root1, root2)==1)
    	  System.out.print("First tree and second tree are IDENTICAL\n");
      else
    	  System.out.print("First tree and second tree are NOT IDENTICAL\n");
      
      
      MyBinaryTree tree3 = new MyBinaryTree();
      root = new Node("1");
      root.left = new Node("2");
      root.right = new Node("3");
      root.left.left = new Node("4");
      root.right.left = new Node("5");
      root.right.right = new Node("6");    
      root.right.right.left = new Node("7");  
      
      System.out.println("========================\n");
      
      System.out.println("THIRD TREE\n========================\n");
      
      System.out.println("Binary Tree: ");
      tree3.printTree(root);
      
      System.out.println("\n\nHeight: " + tree3.findHeight(root));
      
      System.out.println("Number of nodes: " + tree3.countNode(root));
      
      System.out.println("\nInorder traversal: ");
      tree3.printInorder(root);
      
      System.out.println("\nPostorder traversal: ");
      tree3.printPostorder(root);
      
      System.out.println("\nPreorder traversal: ");
      tree3.printPreorder(root);
      
      System.out.println();
      
      System.out.println("========================\n");
      
      if (isClone(root2, root)==1)
    	  System.out.print("Second tree and third tree are IDENTICAL\n");
      else
    	  System.out.print("Second tree and third tree are NOT IDENTICAL\n");

  }
}
