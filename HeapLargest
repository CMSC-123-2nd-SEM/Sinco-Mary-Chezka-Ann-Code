public class HeapLargest {
	
    private int[] Heap;
    private int size;
    private int maxsize;
    private int i;
    private int j;
    
    public HeapLargest(int maxsize) {   
    	this.maxsize = maxsize;
        this.size = 0;
        Heap = new int[this.maxsize];
    }
 
    private int parent(int pos) { 
    	return (pos - 1) / 2; 
    	}
 
    private int leftChild(int pos) { 
    	return (2 * pos) + 1; 
    	}
    
    private int rightChild(int pos) { 
    	return (2 * pos) + 2; 
    	}
    
    private boolean isLeaf(int pos) {
        if (pos > (size / 2) && pos <= size) {
            return true;
        }
        
        return false;
    }
 

    private void swap(int fpos, int spos) {
        int tmp;
        tmp = Heap[fpos];
        Heap[fpos] = Heap[spos];
        Heap[spos] = tmp;
    }
    
    private void maxHeapify(int pos)
    {
        if (isLeaf(pos))
            return;
 
        if (Heap[pos] < Heap[leftChild(pos)]
            || Heap[pos] < Heap[rightChild(pos)]) {
 
            if (Heap[leftChild(pos)]
                > Heap[rightChild(pos)]) {
                swap(pos, leftChild(pos));
                maxHeapify(leftChild(pos));
            }
            else {
                swap(pos, rightChild(pos));
                maxHeapify(rightChild(pos));
            }
        }
    }
    
    public void insert(int element) {
        Heap[size] = element;
 
        int current = size;
        while (Heap[current] > Heap[parent(current)]) {
            swap(current, parent(current));
            current = parent(current);
        }
        size++;
    }
    
    
    public int extractRoot() {
        int root = Heap[0];
        maxHeapify(0);
        return root;
    }
    
    public void printHeap() {
    	System.out.println("HEAP: ");
    	
    	for(i = 0; i < size; i++) {
    		System.out.print(Heap[i] + " ");
    	}
    	
    	System.out.println();
    	System.out.println();
    	
    	System.out.println("root = " + extractRoot());
    	
    	System.out.print("left subtree = ");
    	
    	for(i = 0; i<size/2; i++) {
    		if(leftChild(i) < size) 
    			System.out.print(Heap[leftChild(i)] + " ");
        }
    	
    	System.out.println();
    	
    	System.out.print("right subtree = ");
    	
    	for(i = 0; i<size/2; i++) {
    		if(rightChild(i) < size) 
                System.out.print(Heap[rightChild(i)] + " ");
        }
        
    	System.out.println();
         
    }
    
    public void printInorder() {
    	System.out.println("\nInorder traversal: ");
    	
    	for(i = 0; i < size/2; i++) {
    		if(leftChild(i) < size) 
    			System.out.print(Heap[leftChild(i)] + " ");
        }
    	
    	System.out.print(extractRoot() + " ");
    	
    	for(i = 0; i < size/2; i++) {
    		if(rightChild(i) < size) 
                System.out.print(Heap[rightChild(i)] + " ");
        }
    	
    }
    
    public void printPostorder() {
    	System.out.println("\nPosorder traversal: ");
    	
    	for(i = 0; i < size/2; i++) {
    		if(leftChild(i) < size) 
    			System.out.print(Heap[leftChild(i)] + " ");
        }
    
    	for(i = 0; i<size/2; i++) {
    		if(rightChild(i) < size) 
                System.out.print(Heap[rightChild(i)] + " ");
        }
    	
    	System.out.print(extractRoot() + " ");
        
    }
    
    public void printPreorder() {
    	System.out.println("\nPreorder traversal: ");
    	
    	System.out.print(extractRoot() + " ");
    	
    	for(i = 0; i < size/2; i++) {
    		if(leftChild(i) < size) 
    			System.out.print(Heap[leftChild(i)] + " ");
        }
    	
    	for(i=0; i < size/2; i++) {
    		if(rightChild(i) < size) 
                System.out.print(Heap[rightChild(i)] + " ");
        }

    }
    
    public void heapSort() {
    	int temp;
    	
     	for (i = 0; i < size; i++) {     
     		for (j = i + 1; j < size; j++) {     
     			if(Heap[i] < Heap[j]) {    
     				temp = Heap[i];    
                    Heap[i] = Heap[j];    
                    Heap[j] = temp;    
                }     
            }
        }   
    }
    
    public void kLargest(int k) {
    	System.out.println();
    	
    	System.out.print("\n" + k + " largest elements: ");
    	
    	heapSort();
    	
    	for(i = 0; i < k; i++) {
    		System.out.print(Heap[i] + " ");
    	}
    }
    

	public static void main(String[] args) {
		HeapLargest heap = new HeapLargest(11);
		heap.insert(58);
		heap.insert(26);
		heap.insert(1);
		heap.insert(74);
		heap.insert(85);
		heap.insert(30);
		heap.insert(41);
		heap.insert(8);
		heap.insert(12);
		heap.insert(63);
		heap.insert(99);

		heap.printHeap();
		heap.printInorder();
		heap.printPostorder();
		heap.printPreorder();
		
		heap.kLargest(5);
		
		System.out.println();
		
		System.out.println("\n================================================\n");
		
		HeapLargest heap2 = new HeapLargest(13);
		heap2.insert(384);
		heap2.insert(82);
		heap2.insert(514);
		heap2.insert(111);
		heap2.insert(703);
		heap2.insert(263);
		heap2.insert(19);
		heap2.insert(400);
		heap2.insert(1026);
		heap2.insert(950);
		heap2.insert(810);
		heap2.insert(75);
		heap2.insert(332);

		
		heap2.printHeap();
		heap2.printInorder();
		heap2.printPostorder();
		heap2.printPreorder();
		
		heap2.kLargest(7);
	}

}
